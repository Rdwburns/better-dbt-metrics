name: Compile Better-DBT-Metrics

on:
  push:
    paths:
      - 'metrics/**/*.yml'
      - 'metrics/**/*.yaml'
      - 'templates/**/*.yml'
      - 'templates/**/*.yaml'
  pull_request:
    paths:
      - 'metrics/**/*.yml'
      - 'metrics/**/*.yaml'
      - 'templates/**/*.yml'
      - 'templates/**/*.yaml'
  workflow_dispatch:
    inputs:
      validate_only:
        description: 'Only validate, do not compile'
        required: false
        default: false
        type: boolean

jobs:
  validate-and-compile:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install Better-DBT-Metrics
        run: |
          pip install --upgrade pip
          pip install better-dbt-metrics
          
      - name: Validate metrics
        id: validate
        run: |
          echo "🔍 Validating metrics..."
          if better-dbt-metrics validate --input-dir metrics/ -v; then
            echo "✅ Validation passed"
            echo "validation_passed=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Validation failed"
            echo "validation_passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
      - name: Compile metrics
        if: ${{ !inputs.validate_only && steps.validate.outputs.validation_passed == 'true' }}
        run: |
          echo "🔨 Compiling metrics to dbt models..."
          better-dbt-metrics compile \
            --input-dir metrics/ \
            --output-dir models/semantic/ \
            --template-dirs templates/
            
      - name: Upload compiled models
        if: ${{ !inputs.validate_only && steps.validate.outputs.validation_passed == 'true' }}
        uses: actions/upload-artifact@v3
        with:
          name: compiled-dbt-models
          path: models/semantic/
          
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const validation_passed = '${{ steps.validate.outputs.validation_passed }}' === 'true';
            const validate_only = ${{ inputs.validate_only || false }};
            
            let comment = '## 📊 Better-DBT-Metrics Report\n\n';
            
            if (validation_passed) {
              comment += '✅ **Validation passed**\n\n';
              
              if (!validate_only) {
                comment += '### Compilation Summary\n';
                comment += '- Metrics compiled successfully\n';
                comment += '- Output location: `models/semantic/`\n';
                comment += '- [Download compiled models](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n';
              }
            } else {
              comment += '❌ **Validation failed**\n\n';
              comment += 'Please check the [workflow logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.\n';
            }
            
            // Find and update existing comment or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Better-DBT-Metrics Report')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }